m1 = ugarchfit(amd_return, spec=spec1)
m1
plot(m1, which="all")
plot(m1, which=9)
plot(m2, which=9)
plot(m2, which="all")
spec3 = ugarchspec(
mean.model = list(armaOrder = c(ar,0)),
variance.model = list(model = "eGARCH", garchOrder = c(1,1)),
distribution.model = "sstd")
m3 = ugarchfit(amd_return, spec=spec3)
m3
plot(m3, which=12)
plot(m3, which="all")
m3$residuals
residuals(m3)
Box.test(residuals(m3), lag=20, fitdf=ar, type="Ljung-Box")
Box.test(residuals(m3), lag=20, fitdf=ar+2, type="Ljung-Box")
Box.test(residuals(m3), lag=20, fitdf=ar+2, type="Ljung-Box")
Box.test(residuals(m3)^2, lag=20, fitdf=ar+2, type="Ljung-Box")
Box.test(residuals(m3), lag=20, fitdf=ar+2, type="Ljung-Box")
Box.test(residuals(m3)^2, lag=20, fitdf=ar, type="Ljung-Box")
Box.test(residuals(m3), lag=20, fitdf=ar+2, type="Ljung-Box")
Box.test(residuals(m3)^2, lag=20, fitdf=ar+2, type="Ljung-Box")
acf(residuals(m3)^2)
Box.test(residuals(m3), lag=20, fitdf=ar+2, type="Ljung-Box")
Box.test(residuals(m3)^2, lag=20, fitdf=ar+2, type="Ljung-Box")
acf(residuals(m3)^2, lag.max = 30)
Box.test(residuals(m3), lag=20, fitdf=ar+2, type="Ljung-Box")
Box.test(residuals(m3)^2, lag=20, fitdf=ar+2, type="Ljung-Box")
acf(residuals(m3)^2, lag.max = 20)
Box.test(residuals(m3), lag=20, fitdf=ar+2, type="Ljung-Box")
Box.test(residuals(m3)^2, lag=20, fitdf=ar+2, type="Ljung-Box")
acf(residuals(m3)^2, lag.max = 1)
Box.test(residuals(m3), lag=20, fitdf=ar+2, type="Ljung-Box")
Box.test(residuals(m3)^2, lag=20, fitdf=ar+2, type="Ljung-Box")
acf(residuals(m3)^2, lag.max = 20)
spec3 = ugarchspec(
mean.model = list(armaOrder = c(ar,0)),
variance.model = list(model = "eGARCH", garchOrder = c(1,1)),
distribution.model = "sstd")
m3 = ugarchfit(amd_return, spec=spec3)
m3
plot(m3, which=12)
plot(m3, which=c(10,11))
par(mfrow=c(1,2))
plot(m3, which=10)
plot(m3, which=11)
spec3 = ugarchspec(
mean.model = list(armaOrder = c(ar,0)),
variance.model = list(model = "eGARCH", garchOrder = c(1,1)),
distribution.model = "sstd")
m3 = ugarchfit(amd_return, spec=spec3)
m3
plot(m3, which=12)
plot(m3, which="all")
par(mfrow=c(1,2))
plot(m3, which=10)
plot(m3, which=11)
uncmean(m3)
uncvariance(m3)
tsla_price = read.table("TSLA.csv", sep=",", header=TRUE)
tsla_price = tsla_price$Adj.Close
plot(tsla_price, type='l', ylab="tsla adj close price", main="Plot of (start) 6/30/2010 - 12/05/2020 daily AMD stock price")
tsla_price = read.table("TSLA.csv", sep=",", header=TRUE)
tsla_price = tsla_price$Adj.Close
plot(tsla_price, type='l', ylab="tsla adj close price", main="Plot of (start) 6/30/2010 - 12/05/2020 daily TSLA stock price")
tsla_return = diff(log(tsla_price)) # daily log returns
plot(tsla_return, type="o", main="Plot of (start) 6/30/2010 - 12/05/2020 daily TSLA stock returns")
knitr::opts_chunk$set(echo = TRUE)
set.seed(1234)
#devtools::install_github('wrengels/HWxtest', subdir='pkg') # for basicStats (only once)
library(diveRsity) # for basicStats (maybe more)
library(rugarch)
library(quantmod)
library(moments)
setwd("~/Schoolwork/STAT 461/Final Project")
par(mfrow=c(1,2))
acf(tsla_return, main="acf amd_return")
pacf(tsla_return, main="pacf amd_return")
mean(tsla_return)
sd(tsla_return)
skewness(tsla_return)
kurtosis(tsla_return)
par(mfrow=c(1,2))
acf(tsla_return, main="acf amd_return")
pacf(tsla_return, main="pacf amd_return")
knitr::opts_chunk$set(echo = TRUE)
set.seed(1234)
#devtools::install_github('wrengels/HWxtest', subdir='pkg') # for basicStats (only once)
library(diveRsity) # for basicStats (maybe more)
library(rugarch)
library(quantmod)
library(moments)
setwd("~/Schoolwork/STAT 461/Final Project")
tsla_price = read.table("TSLA.csv", sep=",", header=TRUE)
tsla_price = tsla_price$Adj.Close
plot(tsla_price, type='l', ylab="tsla adj close price", main="Plot of (start) 6/30/2010 - 12/05/2020 daily TSLA stock price")
tsla_return = diff(log(tsla_price)) # daily log returns
plot(tsla_return, type="o", main="Plot of (start) 6/30/2010 - 12/05/2020 daily TSLA stock returns")
par(mfrow=c(1,2))
acf(tsla_return, main="acf amd_return")
pacf(tsla_return, main="pacf amd_return")
mean(tsla_return)
sd(tsla_return)
skewness(tsla_return)
kurtosis(tsla_return)
t.test(tsla_return, mu=0, alternative="two.sided")
Box.test(tsla_return, lag=20, type="Ljung-Box")
mean(tsla_return)
sd(tsla_return)
skewness(tsla_return)
kurtosis(tsla_return)
testing_ma = 5
aic = matrix(rep(0, testing_ma), testing_ma, 1)
bic = matrix(rep(0, testing_ma), testing_ma, 1)
for (i in 1:testing_ma) {
m = arima(tsla_return, order=c(0,0,i))
aic[i,1] = AIC(m)
bic[i,1] = BIC(m)
}
which(aic== min(aic), arr.ind = TRUE) # [7, 1] {ARIMA(7,0,0)}
which(bic== min(bic), arr.ind = TRUE) # [1, 1] {ARIMA(1,0,0)}
testing_ma = 5
aic = matrix(rep(0, testing_ma), testing_ma, 1)
bic = matrix(rep(0, testing_ma), testing_ma, 1)
for (i in 1:testing_ma) {
m = arima(tsla_return, order=c(0,0,i-1))
aic[i,1] = AIC(m)
bic[i,1] = BIC(m)
}
which(aic== min(aic), arr.ind = TRUE) # [7, 1] {ARIMA(7,0,0)}
which(bic== min(bic), arr.ind = TRUE) # [1, 1] {ARIMA(1,0,0)}
testing_ma = 10
aic = matrix(rep(0, testing_ma), testing_ma, 1)
bic = matrix(rep(0, testing_ma), testing_ma, 1)
for (i in 1:testing_ma) {
m = arima(tsla_return, order=c(0,0,i-1))
aic[i,1] = AIC(m)
bic[i,1] = BIC(m)
}
which(aic== min(aic), arr.ind = TRUE) # [7, 1] {ARIMA(7,0,0)}
which(bic== min(bic), arr.ind = TRUE) # [1, 1] {ARIMA(1,0,0)}
testing_ma = 5
aic = matrix(rep(0, testing_ma), testing_ma, 1)
bic = matrix(rep(0, testing_ma), testing_ma, 1)
for (i in 1:testing_ma) {
m = arima(tsla_return, order=c(0,0,i))
aic[i,1] = AIC(m)
bic[i,1] = BIC(m)
}
which(aic== min(aic), arr.ind = TRUE) # [7, 1] {ARIMA(7,0,0)}
which(bic== min(bic), arr.ind = TRUE) # [1, 1] {ARIMA(1,0,0)}
par(mfrow=c(1,2))
acf(ar_model$residuals^2, main="acf residuals^2")
pacf(ar_model$residuals^2, main="pacf residuals^2")
Box.test(ar_model$residuals^2, lag=20, fitdf=ar, type="Ljung-Box")
par(mfrow=c(1,2))
acf(tsla_return, main="acf amd_return")
pacf(tsla_return, main="pacf amd_return")
par(mfrow=c(1,2))
acf(tsla_return, main="acf tsla_return")
pacf(tsla_return, main="pacf tsla_return")
par(mfrow=c(1,2))
acf(tsla_return^2, main="acf tsla_return^2")
pacf(tsla_return^2, main="pacf tsla_return^2")
par(mfrow=c(1,2))
acf(tsla_return^2, main="acf tsla_return^2")
pacf(tsla_return^2, main="pacf tsla_return^2")
ma = 1
spec1 = ugarchspec(
mean.model = list(armaOrder = c(0,ma)),
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
distribution.model = "norm")
m1 = ugarchfit(tsla_return, spec=spec1)
m1
knitr::opts_chunk$set(echo = TRUE)
set.seed(1234)
#devtools::install_github('wrengels/HWxtest', subdir='pkg') # for basicStats (only once)
library(diveRsity) # for basicStats (maybe more)
library(rugarch)
library(quantmod)
library(moments)
setwd("~/Schoolwork/STAT 461/Final Project")
tsla_price = read.table("TSLA.csv", sep=",", header=TRUE)
tsla_price = tsla_price$Adj.Close
plot(tsla_price, type='l', ylab="tsla adj close price", main="Plot of (start) 6/30/2010 - 12/05/2020 daily TSLA stock price")
tsla_return = diff(log(tsla_price)) # daily log returns
plot(tsla_return, type="o", main="Plot of (start) 6/30/2010 - 12/05/2020 daily TSLA stock returns")
par(mfrow=c(1,2))
acf(tsla_return, main="acf tsla_return")
pacf(tsla_return, main="pacf tsla_return")
mean(tsla_return)
sd(tsla_return)
skewness(tsla_return)
kurtosis(tsla_return)
t.test(tsla_return, mu=0, alternative="two.sided")
Box.test(tsla_return, lag=20, type="Ljung-Box")
#testing_ma = 5
#aic = matrix(rep(0, testing_ma), testing_ma, 1)
#bic = matrix(rep(0, testing_ma), testing_ma, 1)
#for (i in 1:testing_ma) {
#  m = arima(tsla_return, order=c(0,0,i))
#  aic[i,1] = AIC(m)
#  bic[i,1] = BIC(m)
#}
#which(aic== min(aic), arr.ind = TRUE) # [1, 1] {ARIMA(0,0,1)}
#which(bic== min(bic), arr.ind = TRUE) # [1, 1] {ARIMA(0,0,1)}
par(mfrow=c(1,2))
acf(tsla_return^2, main="acf tsla_return^2")
pacf(tsla_return^2, main="pacf tsla_return^2")
ma = 1
spec1 = ugarchspec(
mean.model = list(armaOrder = c(0,ma)),
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
distribution.model = "norm")
m1 = ugarchfit(tsla_return, spec=spec1)
m1
ma = 1
spec1 = ugarchspec(
mean.model = list(armaOrder = c(0,ma)),
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
distribution.model = "norm")
m1 = ugarchfit(tsla_return, spec=spec1)
m1
plot(m1, which=9)
spec2 = ugarchspec(
mean.model = list(armaOrder = c(0,ma)),
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
distribution.model = "sstd")
m2 = ugarchfit(tsla_return, spec=spec2)
m2
plot(m2, which="all")
spec3 = ugarchspec(
mean.model = list(armaOrder = c(0,ma)),
variance.model = list(model = "eGARCH", garchOrder = c(1,1)),
distribution.model = "sstd")
m3 = ugarchfit(tsla_return, spec=spec3)
m3
plot(m3, which=12)
plot(m3, which="all")
par(mfrow=c(1,2))
plot(m3, which=10)
plot(m3, which=11)
spec2 = ugarchspec(
mean.model = list(armaOrder = c(0,ma)),
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
distribution.model = "sstd")
m2 = ugarchfit(tsla_return, spec=spec2)
m2
plot(m2, which="all")
spec3 = ugarchspec(
mean.model = list(armaOrder = c(0,ma)),
variance.model = list(model = "eGARCH", garchOrder = c(2,1)),
distribution.model = "sstd")
m3 = ugarchfit(tsla_return, spec=spec3)
m3
plot(m3, which=12)
plot(m3, which="all")
par(mfrow=c(1,2))
plot(m3, which=10)
plot(m3, which=11)
spec3 = ugarchspec(
mean.model = list(armaOrder = c(0,ma)),
variance.model = list(model = "eGARCH", garchOrder = c(2,1)),
distribution.model = "sstd")
m3 = ugarchfit(tsla_return, spec=spec3)
m3
plot(m3, which=12)
plot(m3, which="all")
par(mfrow=c(1,2))
plot(m3, which=10)
plot(m3, which=11)
spec3 = ugarchspec(
mean.model = list(armaOrder = c(0,ma)),
variance.model = list(model = "eGARCH", garchOrder = c(1,2)),
distribution.model = "sstd")
m3 = ugarchfit(tsla_return, spec=spec3)
m3
plot(m3, which=12)
plot(m3, which="all")
par(mfrow=c(1,2))
plot(m3, which=10)
plot(m3, which=11)
spec3 = ugarchspec(
mean.model = list(armaOrder = c(0,ma)),
variance.model = list(model = "eGARCH", garchOrder = c(2,1)),
distribution.model = "sstd")
m3 = ugarchfit(tsla_return, spec=spec3)
m3
plot(m3, which=12)
plot(m3, which="all")
par(mfrow=c(1,2))
plot(m3, which=10)
plot(m3, which=11)
spec3 = ugarchspec(
mean.model = list(armaOrder = c(0,ma)),
variance.model = list(model = "eGARCH", garchOrder = c(2,1)),
distribution.model = "sstd")
m3 = ugarchfit(tsla_return, spec=spec3)
m3
plot(m3, which=12)
plot(m3, which="all")
par(mfrow=c(1,2))
plot(m3, which=10)
plot(m3, which=11)
spec3 = ugarchspec(
mean.model = list(armaOrder = c(0,ma)),
variance.model = list(model = "eGARCH", garchOrder = c(2,2)),
distribution.model = "sstd")
m3 = ugarchfit(tsla_return, spec=spec3)
m3
plot(m3, which=12)
plot(m3, which="all")
par(mfrow=c(1,2))
plot(m3, which=10)
plot(m3, which=11)
spec3 = ugarchspec(
mean.model = list(armaOrder = c(0,ma)),
variance.model = list(model = "eGARCH", garchOrder = c(2,1)),
distribution.model = "sstd")
m3 = ugarchfit(tsla_return, spec=spec3)
m3
plot(m3, which=12)
plot(m3, which="all")
par(mfrow=c(1,2))
plot(m3, which=10)
plot(m3, which=11)
knitr::opts_chunk$set(echo = TRUE)
set.seed(1234)
#devtools::install_github('wrengels/HWxtest', subdir='pkg') # for basicStats (only once)
library(diveRsity) # for basicStats (maybe more)
library(rugarch)
library(quantmod)
library(moments)
setwd("~/Schoolwork/STAT 461/Final Project")
tsla_price = read.table("TSLA.csv", sep=",", header=TRUE)
tsla_price = tsla_price$Adj.Close
plot(tsla_price, type='l', ylab="tsla adj close price", main="Plot of (start) 6/30/2010 - 12/05/2020 daily TSLA stock price")
tsla_return = diff(log(tsla_price)) # daily log returns
plot(tsla_return, type="o", main="Plot of (start) 6/30/2010 - 12/05/2020 daily TSLA stock returns")
par(mfrow=c(1,2))
acf(tsla_return, main="acf tsla_return")
pacf(tsla_return, main="pacf tsla_return")
mean(tsla_return)
sd(tsla_return)
skewness(tsla_return)
kurtosis(tsla_return)
t.test(tsla_return, mu=0, alternative="two.sided")
Box.test(tsla_return, lag=20, type="Ljung-Box")
par(mfrow=c(1,2))
acf(tsla_return^2, main="acf tsla_return^2")
pacf(tsla_return^2, main="pacf tsla_return^2")
ma = 1
spec1 = ugarchspec(
mean.model = list(armaOrder = c(0,ma)),
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
distribution.model = "norm")
m1 = ugarchfit(tsla_return, spec=spec1)
m1
plot(m1, which=9)
spec2 = ugarchspec(
mean.model = list(armaOrder = c(0,ma)),
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
distribution.model = "sstd")
m2 = ugarchfit(tsla_return, spec=spec2)
m2
plot(m2, which="all")
spec3 = ugarchspec(
mean.model = list(armaOrder = c(0,ma)),
variance.model = list(model = "eGARCH", garchOrder = c(1,1)),
distribution.model = "sstd")
m3 = ugarchfit(tsla_return, spec=spec3)
m3
plot(m3, which=12)
plot(m3, which="all")
par(mfrow=c(1,2))
plot(m3, which=10)
plot(m3, which=11)
spec3 = ugarchspec(
mean.model = list(armaOrder = c(0,ma)),
variance.model = list(model = "eGARCH", garchOrder = c(2,1)),
distribution.model = "sstd")
m3 = ugarchfit(tsla_return, spec=spec3)
m3
plot(m3, which=12)
plot(m3, which="all")
par(mfrow=c(1,2))
plot(m3, which=10)
plot(m3, which=11)
spec2 = ugarchspec(
mean.model = list(armaOrder = c(0,ma)),
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
distribution.model = "sstd")
knitr::opts_chunk$set(echo = TRUE)
set.seed(1234)
#devtools::install_github('wrengels/HWxtest', subdir='pkg') # for basicStats (only once)
library(diveRsity) # for basicStats (maybe more)
library(rugarch)
library(quantmod)
library(moments)
setwd("~/Schoolwork/STAT 461/Final Project")
tsla_price = read.table("TSLA.csv", sep=",", header=TRUE)
tsla_price = tsla_price$Adj.Close
plot(tsla_price, type='l', ylab="tsla adj close price", main="Plot of (start) 6/30/2010 - 12/05/2020 daily TSLA stock price")
tsla_return = diff(log(tsla_price)) # daily log returns
plot(tsla_return, type="o", main="Plot of (start) 6/30/2010 - 12/05/2020 daily TSLA stock returns")
par(mfrow=c(1,2))
acf(tsla_return, main="acf tsla_return")
pacf(tsla_return, main="pacf tsla_return")
mean(tsla_return)
sd(tsla_return)
skewness(tsla_return)
kurtosis(tsla_return)
mean(tsla_return)
sd(tsla_return)
skewness(tsla_return)
kurtosis(tsla_return)
t.test(tsla_return, mu=0, alternative="two.sided")
Box.test(tsla_return, lag=20, type="Ljung-Box")
mean(tsla_return)
sd(tsla_return)
skewness(tsla_return)
kurtosis(tsla_return)
t.test(tsla_return, mu=0, alternative="two.sided")
Box.test(tsla_return, lag=20, type="Ljung-Box")
par(mfrow=c(1,2))
acf(tsla_return^2, main="acf tsla_return^2")
pacf(tsla_return^2, main="pacf tsla_return^2")
ma = 1
spec1 = ugarchspec(
mean.model = list(armaOrder = c(0,ma)),
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
distribution.model = "norm")
m1 = ugarchfit(tsla_return, spec=spec1)
m1
plot(m1, which=9)
spec3 = ugarchspec(
mean.model = list(armaOrder = c(0,ma)),
variance.model = list(model = "eGARCH", garchOrder = c(1,1)),
distribution.model = "sstd")
knitr::opts_chunk$set(echo = TRUE)
set.seed(1234)
#devtools::install_github('wrengels/HWxtest', subdir='pkg') # for basicStats (only once)
library(diveRsity) # for basicStats (maybe more)
library(rugarch)
library(quantmod)
library(moments)
setwd("~/Schoolwork/STAT 461/Final Project")
tsla_price = read.table("TSLA.csv", sep=",", header=TRUE)
tsla_price = tsla_price$Adj.Close
plot(tsla_price, type='l', ylab="tsla adj close price", main="Plot of (start) 6/30/2010 - 12/05/2020 daily TSLA stock price")
tsla_return = diff(log(tsla_price)) # daily log returns
plot(tsla_return, type="o", main="Plot of (start) 6/30/2010 - 12/05/2020 daily TSLA stock returns")
par(mfrow=c(1,2))
acf(tsla_return, main="acf tsla_return")
pacf(tsla_return, main="pacf tsla_return")
mean(tsla_return)
sd(tsla_return)
skewness(tsla_return)
kurtosis(tsla_return)
t.test(tsla_return, mu=0, alternative="two.sided")
Box.test(tsla_return, lag=20, type="Ljung-Box")
par(mfrow=c(1,2))
acf(tsla_return^2, main="acf tsla_return^2")
pacf(tsla_return^2, main="pacf tsla_return^2")
ma = 1
spec1 = ugarchspec(
mean.model = list(armaOrder = c(0,ma)),
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
distribution.model = "norm")
m1 = ugarchfit(tsla_return, spec=spec1)
m1
plot(m1, which=9)
ma = 1
spec1 = ugarchspec(
mean.model = list(armaOrder = c(0,ma)),
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
distribution.model = "norm")
m1 = ugarchfit(tsla_return, spec=spec1)
m1
plot(m1, which=9)
spec2 = ugarchspec(
mean.model = list(armaOrder = c(0,ma)),
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
distribution.model = "sstd")
m2 = ugarchfit(tsla_return, spec=spec2)
m2
plot(m2, which="all")
plot(m2, which=9)
spec3 = ugarchspec(
mean.model = list(armaOrder = c(0,ma)),
variance.model = list(model = "eGARCH", garchOrder = c(1,1)),
distribution.model = "sstd")
m3 = ugarchfit(tsla_return, spec=spec3)
m3
plot(m3, which=12)
plot(m3, which="all")
#par(mfrow=c(1,2))
#plot(m3, which=10)
plot(m3, which=11)
spec3 = ugarchspec(
mean.model = list(armaOrder = c(0,ma)),
variance.model = list(model = "eGARCH", garchOrder = c(2,1)),
distribution.model = "sstd")
m3 = ugarchfit(tsla_return, spec=spec3)
m3
plot(m3, which=12)
plot(m3, which="all")
#par(mfrow=c(1,2))
#plot(m3, which=10)
plot(m3, which=11)
